{"ast":null,"code":"import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport { history } from 'index';\nimport { login, currentAccount, logout } from 'services/firebase.auth.service';\nimport actions from './actions';\nexport function* LOGIN({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload;\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true\n    }\n  });\n  const success = yield call(login, email, password);\n  yield put({\n    type: 'user/LOAD_CURRENT_ACCOUNT'\n  });\n\n  if (success) {\n    yield history.push('/');\n    notification.success({\n      message: 'Logged In',\n      description: 'You have successfully logged in to Clean UI Pro React Admin Template!'\n    });\n  }\n}\nexport function* LOAD_CURRENT_ACCOUNT() {\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true\n    }\n  });\n  const response = yield call(currentAccount);\n\n  if (response) {\n    console.log(response);\n    const {\n      uid: id,\n      email,\n      photoURL: avatar,\n      displayName\n    } = response;\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        id,\n        name: 'Administrator',\n        email,\n        avatar,\n        role: 'admin',\n        authorized: true,\n        displayName,\n        token: response.access_token\n      }\n    });\n  }\n\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: false\n    }\n  });\n}\nexport function* LOGOUT() {\n  yield call(logout);\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      id: '',\n      name: '',\n      role: '',\n      email: '',\n      avatar: '',\n      authorized: false,\n      loading: false\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.LOGIN, LOGIN), takeEvery(actions.LOAD_CURRENT_ACCOUNT, LOAD_CURRENT_ACCOUNT), takeEvery(actions.LOGOUT, LOGOUT), LOAD_CURRENT_ACCOUNT() // run once on app load to check user auth\n  ]);\n}","map":{"version":3,"sources":["/Users/harmbruins/Documents/Ventus Projects/testprofessionalfrontend/src/redux/user/sagas.js"],"names":["all","takeEvery","put","call","notification","history","login","currentAccount","logout","actions","LOGIN","payload","email","password","type","loading","success","push","message","description","LOAD_CURRENT_ACCOUNT","response","console","log","uid","id","photoURL","avatar","displayName","name","role","authorized","token","access_token","LOGOUT","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,MAAhC,QAA8C,gCAA9C;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,UAAUC,KAAV,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA6B;AAClC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,OAA5B;AACA,QAAMT,GAAG,CAAC;AACRY,IAAAA,IAAI,EAAE,gBADE;AAERH,IAAAA,OAAO,EAAE;AACPI,MAAAA,OAAO,EAAE;AADF;AAFD,GAAD,CAAT;AAMA,QAAMC,OAAO,GAAG,MAAMb,IAAI,CAACG,KAAD,EAAQM,KAAR,EAAeC,QAAf,CAA1B;AACA,QAAMX,GAAG,CAAC;AACRY,IAAAA,IAAI,EAAE;AADE,GAAD,CAAT;;AAGA,MAAIE,OAAJ,EAAa;AACX,UAAMX,OAAO,CAACY,IAAR,CAAa,GAAb,CAAN;AACAb,IAAAA,YAAY,CAACY,OAAb,CAAqB;AACnBE,MAAAA,OAAO,EAAE,WADU;AAEnBC,MAAAA,WAAW,EAAE;AAFM,KAArB;AAID;AACF;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMlB,GAAG,CAAC;AACRY,IAAAA,IAAI,EAAE,gBADE;AAERH,IAAAA,OAAO,EAAE;AACPI,MAAAA,OAAO,EAAE;AADF;AAFD,GAAD,CAAT;AAMA,QAAMM,QAAQ,GAAG,MAAMlB,IAAI,CAACI,cAAD,CAA3B;;AACA,MAAIc,QAAJ,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,UAAM;AAAEG,MAAAA,GAAG,EAAEC,EAAP;AAAWb,MAAAA,KAAX;AAAkBc,MAAAA,QAAQ,EAAEC,MAA5B;AAAmCC,MAAAA;AAAnC,QAAmDP,QAAzD;AACA,UAAMnB,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAE,gBADE;AAERH,MAAAA,OAAO,EAAE;AACPc,QAAAA,EADO;AAEPI,QAAAA,IAAI,EAAE,eAFC;AAGPjB,QAAAA,KAHO;AAIPe,QAAAA,MAJO;AAKPG,QAAAA,IAAI,EAAE,OALC;AAMPC,QAAAA,UAAU,EAAE,IANL;AAOPH,QAAAA,WAPO;AAQPI,QAAAA,KAAK,EAAEX,QAAQ,CAACY;AART;AAFD,KAAD,CAAT;AAaD;;AACD,QAAM/B,GAAG,CAAC;AACRY,IAAAA,IAAI,EAAE,gBADE;AAERH,IAAAA,OAAO,EAAE;AACPI,MAAAA,OAAO,EAAE;AADF;AAFD,GAAD,CAAT;AAMD;AAED,OAAO,UAAUmB,MAAV,GAAmB;AACxB,QAAM/B,IAAI,CAACK,MAAD,CAAV;AACA,QAAMN,GAAG,CAAC;AACRY,IAAAA,IAAI,EAAE,gBADE;AAERH,IAAAA,OAAO,EAAE;AACPc,MAAAA,EAAE,EAAE,EADG;AAEPI,MAAAA,IAAI,EAAE,EAFC;AAGPC,MAAAA,IAAI,EAAE,EAHC;AAIPlB,MAAAA,KAAK,EAAE,EAJA;AAKPe,MAAAA,MAAM,EAAE,EALD;AAMPI,MAAAA,UAAU,EAAE,KANL;AAOPhB,MAAAA,OAAO,EAAE;AAPF;AAFD,GAAD,CAAT;AAYD;AAED,eAAe,UAAUoB,QAAV,GAAqB;AAClC,QAAMnC,GAAG,CAAC,CACRC,SAAS,CAACQ,OAAO,CAACC,KAAT,EAAgBA,KAAhB,CADD,EAERT,SAAS,CAACQ,OAAO,CAACW,oBAAT,EAA+BA,oBAA/B,CAFD,EAGRnB,SAAS,CAACQ,OAAO,CAACyB,MAAT,EAAiBA,MAAjB,CAHD,EAIRd,oBAAoB,EAJZ,CAIgB;AAJhB,GAAD,CAAT;AAMD","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects'\nimport { notification } from 'antd'\nimport { history } from 'index'\nimport { login, currentAccount, logout } from 'services/firebase.auth.service'\nimport actions from './actions'\n\nexport function* LOGIN({ payload }) {\n  const { email, password } = payload\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true,\n    },\n  })\n  const success = yield call(login, email, password)\n  yield put({\n    type: 'user/LOAD_CURRENT_ACCOUNT',\n  })\n  if (success) {\n    yield history.push('/')\n    notification.success({\n      message: 'Logged In',\n      description: 'You have successfully logged in to Clean UI Pro React Admin Template!',\n    })\n  }\n}\n\nexport function* LOAD_CURRENT_ACCOUNT() {\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true,\n    },\n  })\n  const response = yield call(currentAccount)\n  if (response) {\n    console.log(response);\n\n    const { uid: id, email, photoURL: avatar,displayName } = response\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        id,\n        name: 'Administrator',\n        email,\n        avatar,\n        role: 'admin',\n        authorized: true,\n        displayName,\n        token: response.access_token,\n      },\n    })\n  }\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: false,\n    },\n  })\n}\n\nexport function* LOGOUT() {\n  yield call(logout)\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      id: '',\n      name: '',\n      role: '',\n      email: '',\n      avatar: '',\n      authorized: false,\n      loading: false,\n    },\n  })\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.LOGIN, LOGIN),\n    takeEvery(actions.LOAD_CURRENT_ACCOUNT, LOAD_CURRENT_ACCOUNT),\n    takeEvery(actions.LOGOUT, LOGOUT),\n    LOAD_CURRENT_ACCOUNT(), // run once on app load to check user auth\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}